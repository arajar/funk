
#pragma once

#include "GLIncludes.h"

typedef enum
{
	FLAG_BLEND				= GL_BLEND,
	FLAG_DEPTH_TEST			= GL_DEPTH_TEST,
	FLAG_SCISSOR_TEST		= GL_SCISSOR_TEST,
	FLAG_TEXTURE_2D			= GL_TEXTURE_2D,
	FLAG_CULL_FACE			= GL_CULL_FACE,

	#if !GL_ES
	FLAG_LINE_SMOOTH		= GL_LINE_SMOOTH,
	FLAG_PROGRAM_POINT_SIZE	= GL_PROGRAM_POINT_SIZE,
	#endif
} GLStateFlag;

typedef enum
{
	DATATYPE_BYTE					= GL_BYTE,
	DATATYPE_UNSIGNED_BYTE			= GL_UNSIGNED_BYTE,
	DATATYPE_SHORT					= GL_SHORT,
	DATATYPE_UNSIGNED_SHORT			= GL_UNSIGNED_SHORT,
	DATATYPE_UNSIGNED_SHORT_4_4_4_4	= GL_UNSIGNED_SHORT_4_4_4_4,
	DATATYPE_UNSIGNED_SHORT_5_5_5_1	= GL_UNSIGNED_SHORT_5_5_5_1,
	DATATYPE_UNSIGNED_SHORT_5_6_5	= GL_UNSIGNED_SHORT_5_6_5,
	DATATYPE_INT					= GL_INT,
	DATATYPE_UNSIGNED_INT			= GL_UNSIGNED_INT,
	DATATYPE_UNSIGNED_INT_24_8		= GL_UNSIGNED_INT_24_8,
	//DATATYPE_UNSIGNED_INT_10_10_10_2= GL_UNSIGNED_INT_10_10_10_2,
	DATATYPE_FLOAT					= GL_FLOAT,
	DATATYPE_HALF_FLOAT				= GL_HALF_FLOAT,
	
} GLDataType;


typedef enum
{
	PRIM_TRIANGLES		= GL_TRIANGLES,
	PRIM_TRIANGLE_FAN	= GL_TRIANGLE_FAN,
	PRIM_TRIANGLE_STRIP = GL_TRIANGLE_STRIP,
	PRIM_LINES			= GL_LINES,
	PRIM_LINE_LOOP		= GL_LINE_LOOP,
	PRIM_LINE_STRIP		= GL_LINE_STRIP,
	PRIM_POINTS			= GL_POINTS
} GLPrimtive;


typedef enum
{
	BUFFER_STATIC	= GL_STATIC_DRAW, // never updates
	BUFFER_DYNAMIC	= GL_DYNAMIC_DRAW, // updates sometimes
	BUFFER_STREAM	= GL_STREAM_DRAW, // updates onceß frame
} GLBufferType;



///////////////////////////////////////
// texture

#if GL_ES
    #define GL_R8 GL_R8_EXT
    #define GL_R16F GL_LUMINANCE //GL_R16F_EXT
    #define GL_RG8 GL_RG8_EXT
    #define GL_RGB8 GL_RGB //GL_RGB8_OES
    #define GL_RGB16F GL_RGB16F_EXT
    #define GL_RGB32F GL_RGB32F_EXT
    #define GL_RGBA8 GL_RGBA // GL_RGBA8_OES
    #define GL_RGBA16F GL_RGBA16F_EXT
    #define GL_RGBA32F GL_RGBA32F_EXT
#endif

typedef enum
{
	// R
	TEXFORMAT_INTERNAL_R8		= GL_R8,
	TEXFORMAT_INTERNAL_R16F		= GL_R16F,

	// RG
	TEXFORMAT_INTERNAL_RG8		= GL_RG8,
	
	// RGB
	TEXFORMAT_INTERNAL_RGB8		= GL_RGB8,
	TEXFORMAT_INTERNAL_RGB16F	= GL_RGB16F,
	TEXFORMAT_INTERNAL_RGB32F	= GL_RGB32F,

	// RGBA
	TEXFORMAT_INTERNAL_RGBA8	= GL_RGBA8,
	//TEXFORMAT_INTERNAL_RGBA16	= GL_RGBA16,
	TEXFORMAT_INTERNAL_RGBA16F	= GL_RGBA16F,
	TEXFORMAT_INTERNAL_RGBA32F	= GL_RGBA32F,
} GLTextureInternalFormat;

typedef enum
{
	TEXFORMAT_RGBA			= GL_RGBA,
	TEXFORMAT_RGB			= GL_RGB,
	
	#if GL_ES
	TEXFORMAT_RED			= GL_LUMINANCE,
	TEXFORMAT_RG			= GL_LUMINANCE_ALPHA,
	#else
	TEXFORMAT_RG			= GL_RG,
	TEXFORMAT_RED			= GL_RED,
	#endif

} GLTextureFormat;


typedef enum
{
	TEXWRAP_REPEAT			= GL_REPEAT,
	TEXWRAP_MIRROED_REPEAT	= GL_MIRRORED_REPEAT,
	TEXWRAP_CLAMP			= GL_CLAMP_TO_EDGE,

} GLTextureWrapType;

typedef enum
{
	TEXFILTER_NEAREST	= GL_NEAREST,
	TEXFILTER_LINEAR	= GL_LINEAR,

	// minification filter only!!
	TEXFILTER_NEAREST_MIPMAP_NEAREST= GL_NEAREST_MIPMAP_NEAREST,
	TEXFILTER_LINEAR_MIPMAP_NEAREST	= GL_LINEAR_MIPMAP_NEAREST,
	TEXFILTER_NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,
	TEXFILTER_LINEAR_MIPMAP_LINEAR	= GL_LINEAR_MIPMAP_LINEAR,
	
} GLTextureFilterType;
